@model Dictionary<string, string>

@{
    ViewBag.Title = "PoliciesByCustomerForm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<form>
    <div class="form-row">
        <div class="form-group col-md-3">
            <h2>Current policies for </h2>
        </div>
        <div class="form-group col-md-9">
            <h2 style="font-weight:bold" id="title"></h2>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-7"></div>
        <div class="form-group col-md-4">
            <select id="availablePolicies" class="form-control">
            </select>
        </div>
        <div class="form-group col-md-1">
            <button id="addPolicy" class="btn btn-primary btn-lg">Assign</button>
        </div>
    </div>
</form>

<table id="policiesByCustomer" class="table table-striped table-hover">
    <thead>
        <tr>
            <th>Policy Name</th>
            <th>Action</th>
        </tr>
    </thead>
</table>

@section scripts{
    
    <script>

        $(document).ready( () => {
            policiesByCustForm.configureUI();
            policiesByCustForm.formLogic.getPolicies();
        });


        let policiesByCustForm = {
            global: {
                customerId: @Model["CustomerId"],
                policyByCustomerId: 0,
                policieAdded: {}
            },
            configureUI: () => {

                let customerName = "@Model["CustomerName"]";
                let title = "Current " + customerName + " policies";
                console.log(customerName);
                $("#title").text(customerName);

                var table = $("#policiesByCustomer").DataTable({
                    "lengthChange": false,
                    "bFilter": false,
                    ajax: {
                        url: "/api/policiesByCustomer/" + policiesByCustForm.global.customerId,
                        dataSrc : ""
                    },
                    columns: [
                        {
                            data: "policy.name"
                        },
                        {
                            data: "id",
                            render: (data) => {
                                return "<button class='btn-link js-cancel' data-policy-id=" + data + " onclick= >Cancel</button>";
                            }
                        }
                    ]
                });

                $("#policiesByCustomer").on("click", ".js-cancel", function () {
                    var button = $(this);
                    bootbox.confirm("Are you sure you want to cancel this Policy for the Customer?", (confirmed) => {
                        if (confirmed == true) {
                            //console.log("");
                            policiesByCustForm.global.policyByCustomerId = button.attr("data-policy-id");
                            policiesByCustForm.services.deletePolicyByCustomer();
                        }
                    });

                });

                $("#addPolicy").click((e) => {
                    e.preventDefault();

                    if ($("#availablePolicies").val() == "") {
                        bootbox.alert("Please select one of the available policies");
                        return;
                    }

                    policiesByCustForm.formLogic.loadPolicieByCustomer();
                    policiesByCustForm.services.savePolicieByCustomer();
                });
            },
            formLogic: {
                getPolicies: () => {
                    policiesByCustForm.services.getPolicies()
                        .done((policies) => {
                            $("#availablePolicies").append($("<option value=''>Available Policies</option>"));
                            $.each(policies, function (key, policy) {
                                $("#availablePolicies")
                                    .append($("<option></option>")
                                    .val(policy.id)
                                    .html(policy.name));
                            });
                        });
                },
                loadPolicieByCustomer: () => {
                    policiesByCustForm.global.policieAdded.customerId = policiesByCustForm.global.customerId;
                    policiesByCustForm.global.policieAdded.policyId = $("#availablePolicies").val();
                    policiesByCustForm.global.policieAdded.cancelled = false;
                }
            },
            services: {
                getPolicies: () => {
                    return $.ajax({
                        url: "/api/policies/",
                        method: "GET"
                    });
                },
                savePolicieByCustomer: () => {
                    $.ajax({
                        url: "/api/policiesByCustomer/",
                        method: "POST",
                        data: policiesByCustForm.global.policieAdded
                    }).done((data) => {
                        $("#policiesByCustomer").DataTable().ajax.reload();
                        bootbox.alert("Policy added successfully.");
                    }).fail((data) => {
                        console.log(data);
                        if (error.responseJSON.Message)
                            bootbox.alert(error.responseJSON.Message);
                        else
                            bootbox.alert("An error has ocurred. Please contact our support team.");
                    });
                },
                deletePolicyByCustomer: () => {
                    $.ajax({
                        url: "/api/policiesByCustomer/" + policiesByCustForm.global.policyByCustomerId,
                        method: "DELETE"
                    }).done((data) => {
                        $("#policiesByCustomer").DataTable().ajax.reload();
                        bootbox.alert("Policy cancelled successfully.");
                    }).fail((data) => {
                        console.log(data);
                        if (error.responseJSON.Message)
                            bootbox.alert(error.responseJSON.Message);
                        else
                            bootbox.alert("An error has ocurred. Please contact our support team.");
                    });
                }
            }
        }

    </script>
    
    }